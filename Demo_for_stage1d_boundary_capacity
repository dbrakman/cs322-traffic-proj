Script started on Wed Nov 16 18:30:34 2016
ds)K_for_stage1d_boundary_capacityUR/y3s1/cs322/proj/code/cs322-traffic-projdavid@mactop:~/Documents/UR/y3s1/cs322/proj/code/cs322-traffic-proj$ cat unix_comman
# How to use the current file:
#   Step 1: Copy and paste current file into a file with the name
#	      unix_commands_for_nov2
#	    and save the resulting file in the iMac's Desktop directory
#   Step 2: Preserve that file using the Unix command:
#	      cp -p unix_commands_for_nov2 save_unix_commands_for_nov2
#   Step 3: Edit the file unix_commands_for_nov2 replacing File2, File3, etc.,
#	    with your choice of class names; see NOTE1 below to understand
#	    what this step means as File2, File 3, etc.
#   Step 4: Edit the file unix_commands_for_nov2 replacing "data1" with
#	    your choice of "data2", etc., IF you wish to make such a change;
#	    see NOTE2 below for what this step means as "data1", etc.
#   Step 5: Change the "mode" of the resulting file so the file becomes
#	    executable under the Unix command interpreter, via the
#	    following Unix command:
#	      chmod +x unix_commands_for_nov2
#   Step 6: Try an experiment using the resulting file:
#	      ./unix_commands_for_nov2
#	    Scroll up and down the Unix window to see if that experiment
#	    was as successful as you wanted it to be; if it is,
#	    go to Step 7.  (Otherwise go back to Step 3 or Step 4.)
#   Step 7: Do the following Unix to obtain a demo file:
#	      script
#	      cat unix_commands_for_nov2
#	      ./unix_commands_for_nov2
#	      exit
#	      col -b < typescript > Demo_for_nov2_2016
#   Step 8: Submit all your *java files and all your *data* files and also
#	    the file Demo_for_nov2_2016 to the folder for you team for
#	    the top-level logic project due on Friday, where you submit
#	    all those files during the lab on Wed, Nov 2, to show the
#	    current state of your iterative enhancement.
#!/bin/csh
echo "<UNIX-PROMPT> pwd"
pwd
echo "<UNIX-PROMPT> ls -tl *java"
ls -tl *java
echo "<UNIX-PROMPT> wc *java"
wc *java
echo "<UNIX-PROMPT> cat TrafficTesterView.java"
cat TrafficTesterView.java
# NOTE1 	    On Wed, Nov 2, replace File2, File3, etc., by appropriate
#		    Java class names to demonstrate the current stage of
#		    your iterative enhancement.  Use as many or as few such
#		    classes as you decide would best demonstrate the
#		    current stage of your iterative enhancement.
echo "<UNIX-PROMPT> cat TrafficTesterModel.java"
cat TrafficTesterModel.java
echo "<UNIX-PROMPT> cat Grid.java"
cat Grid.java
echo "<UNIX-PROMPT> cat Intersection.java"
cat Intersection.java
echo "<UNIX-PROMPT> cat Lane.java"
cat Lane.java
echo "<UNIX-PROMPT> cat Car.java"
cat Car.java
echo "<UNIX-PROMPT> /bin/rm *class"
/bin/rm *class
echo "<UNIX-PROMPT> javac TrafficTesterView.java"
javac TrafficTesterView.java
echo "<UNIX-PROMPT> ls -tl *class"
ls -tl *class
# NOTE2 	    On Wed, Nov 2, replace "data1" below by one of "data2" (or
#		    "data3", etc.), if you wish, according to your decision on
#		    what would best demonstrate the current stage of your
#		    iterative enhancement.
echo "<UNIX-PROMPT> cat data1d_boundary_capacity_for_TrafficTesterView"
cat data1d_boundary_capacity_for_TrafficTesterView
echo "<UNIX-PROMPT> java TrafficTesterView < data1d_boundary_capacity_for_TrafficTesterView"
java TrafficTesterView < data1d_boundary_capacity_for_TrafficTesterView
_for_stage1d_boundary_capacity/y3s1/cs322/proj/code/cs322-traffic-projdavid@mactop:~/Documents/UR/y3s1/cs322/proj/code/cs322-traffic-proj$ ./unix_commands
<UNIX-PROMPT> pwd
/Users/david/Documents/UR/y3s1/cs322/proj/code/cs322-traffic-proj
<UNIX-PROMPT> ls -tl *java
-rwxr-xr-x@ 1 david  staff   8058 Nov 16 18:29 TrafficTesterView.java
-rwxr-xr-x  1 david  staff   2365 Nov 16 18:09 Car.java
-rwxr-xr-x@ 1 david  staff  11853 Nov 16 17:59 Grid.java
-rwxr-xr-x@ 1 david  staff   6356 Nov 16 17:59 Intersection.java
-rwxr-xr-x@ 1 david  staff   4514 Nov 16 17:59 Lane.java
-rwxr-xr-x@ 1 david  staff   2043 Nov 16 17:59 TrafficTesterModel.java
<UNIX-PROMPT> wc *java
      73     213    2365 Car.java
     273    1099   11853 Grid.java
     156     694    6356 Intersection.java
     158     487    4514 Lane.java
      52     175    2043 TrafficTesterModel.java
     191     896    8058 TrafficTesterView.java
     903    3564   35189 total
<UNIX-PROMPT> cat TrafficTesterView.java
// Programmer: Arthur Charlesworth  (c) Copyright 2016
// Modified by GOATS team: Alex David Rex Tom Zihao
// *****************************************************************************
// *****************************************************************************
// **** TrafficTesterView
// *****************************************************************************
// *****************************************************************************

// Latest Enhancement: Commented out print statements; run sim for timesteps
// NOTE: A lane has the same coordinates as the intersection the lane aims at.
//   Throughout the rest of the semester, make sure that
//   intersections of a grid are processed in exactly the following order:
//     row 1 intersections, from left to right
//     row 2 intersections, from left to right, etc, for all rows.
//   In an actual simulation, that process should be repeated (in that specific
//   order) as many times as necessary for the desired length of the simulation.
//   But, for simplicity, the initial tester software students build should
//   only show the first iteration of the above process, that is, only one
//   processing of each of the intersections.
//
//   The format of the data to be used with the program in this file
//   is show, via an example, at the end of this file.

import java.util.*;

public class TrafficTesterView {

// NOTE: Just to keep the current tester program really simple,
// the following constants are not encapsulated within two classes, Direction
// and Turn, according to appropriate Information Hiding:
  static final int SOUTHWARD = 0;
  static final int EASTWARD = 1;
  static final int NORTHWARD = 2;
  static final int WESTWARD = 3;
  static final int NEVER_TURN = 0;
  static final int TURN_RIGHTWARD = 1;
  static final int TURN_LEFTWARD = -1;

  public static void main(String[] args) {
    Scanner console = new Scanner(System.in);
    console.nextLine();
    int numIntersectionsInOneDirection = console.nextInt();
    //System.out.print("The number of intersections in one direction ");
    //System.out.println("is: " + numIntersectionsInOneDirection);
    console.nextLine();
    console.nextLine();
    int lengthOfSimulation = console.nextInt();
    //System.out.print("The length of the simulation ");
    //System.out.println("is: " + lengthOfSimulation);
    console.nextLine();
    console.nextLine();
    int maxLaneCapacity = console.nextInt();
    //System.out.print("The maximum capacity of a lane is ");
    //System.out.println("is: " + maxLaneCapacity);
    console.nextLine();
    console.nextLine();
    int minTimeToTravelLane = console.nextInt();
    //System.out.print("The minimum time to travel a lane ");
    //System.out.println("is: " + minTimeToTravelLane);
    console.nextLine();
    console.nextLine();
    int maxQuarterRoundaboutCapacity = console.nextInt();
    //System.out.print("The maximum capacity of a quarter of a roundabout ");
    //System.out.println("is: " + maxQuarterRoundaboutCapacity);
    console.nextLine();
    console.nextLine();
    int minTimeToTravelQuarterRoundabout = console.nextInt();
    //System.out.print("The minimum time to travel a quarter of a roundabout ");
    //System.out.println("is: " + minTimeToTravelQuarterRoundabout);
    console.nextLine();
    console.nextLine();
    int numberOfCars = console.nextInt();
    //System.out.println("The number of cars is: " + numberOfCars);
    int carID;
    int row;
    int col;
    int laneDirectionCode;
    int numBlocksBeforeTurning;
    int turnDirectionCode;
    ArrayList< ArrayList<Integer> > carParameters;
    carParameters = new ArrayList< ArrayList<Integer> >();
    for (int i = 1; i <= numberOfCars; i++) {
       console.nextLine();
       console.nextLine();
       carID = console.nextInt();
       //System.out.println("Car #" + carID);
       console.nextLine();
       console.nextLine();
       col = console.nextInt();
       console.nextLine();
       console.nextLine();
       row = console.nextInt();
       console.nextLine();
       console.nextLine();
       laneDirectionCode = console.nextInt();
       console.nextLine();
       console.nextLine();
       numBlocksBeforeTurning = console.nextInt();
       console.nextLine();
       console.nextLine();
       turnDirectionCode = console.nextInt();
       ArrayList<Integer> currentParams = new ArrayList<Integer>();
       currentParams.add(carID);
       currentParams.add(row);
       currentParams.add(col);
       currentParams.add(laneDirectionCode);
       currentParams.add(numBlocksBeforeTurning);
       currentParams.add(turnDirectionCode);
       carParameters.add(currentParams);
       //System.out.println("  is born in the lane located at col " + col +
       //		    " and row " + row + ", that aims " +
       //		    convertToLaneDirection(laneDirectionCode) + ",");
       //System.out.println("  and has " + numBlocksBeforeTurning +
       //		    " block(s) to go before turning");
       //System.out.println("  and plans to " +
       //		    convertToTurnDirection(turnDirectionCode));
    } // end for
    //System.out.println("In TrafficTesterView: constructing a Traffic"+
    //	      "TesterModel");
    TrafficTesterModel sim = new TrafficTesterModel(
	    numIntersectionsInOneDirection,numIntersectionsInOneDirection,
	    carParameters, lengthOfSimulation,maxLaneCapacity,
	    minTimeToTravelLane);
    //System.out.println("In TrafficTesterView: running the TrafficTesterModel");
    sim.run();

  } // main

  public static String convertToLaneDirection(int laneDirectionCode) {
    if (laneDirectionCode == SOUTHWARD)      return "SOUTHWARD";
    if (laneDirectionCode == EASTWARD)	     return "EASTWARD";
    if (laneDirectionCode == NORTHWARD)      return "NORTHWARD";
    if (laneDirectionCode == WESTWARD)	     return "WESTWARD";
    return "ILLEGAL laneDirectionCode!!!";
  } // convertToLaneDirection

  public static String convertToTurnDirection(int turnDirectionCode) {
    if (turnDirectionCode == NEVER_TURN)     return "NEVER_TURN";
    if (turnDirectionCode == TURN_RIGHTWARD) return "TURN_RIGHTWARD";
    if (turnDirectionCode == TURN_LEFTWARD)  return "TURN_LEFTWARD";
    return "ILLEGAL turnDirectionCode!!!";
  } // convertToTurnDirection

} // TrafficTesterView

////////////////// Example of sample use of the above program //////////////////
// except for the fact that all the following lines have been made comments,  //
// and also the actual phrase "additional blocks to travel" in the data       //
// shown below has been shortened to the phrase "additional blocks" to fit    //
// the lines below into the required 80-columns per line.		      //
////////////////////////////////////////////////////////////////////////////////
//numIntersectionsInOneDirection:
//1
//number of cars created for the test:
//2
//car number:
//1
//born in the lane that is positioned at col:
//1
//born in the lane that is positioned at row:
//1
//born in the lane that is oriented in direction:
//0
//additional blocks prior to turning (-1 means the car will never turn):
//0
//direction the car will turn, when the car turns:
//1
//car number:
//2
//born in the lane that is positioned at col:
//1
//born in the lane that is positioned at row:
//1
//born in the lane that is oriented in direction:
//3
//additional blocks prior to turning (-1 means the car will never turn):
//-1
//direction the car will turn, when the car turns:
//0
//hopper2{acharles}2484: java TrafficTesterView < data1_for_TrafficTesterView
//The number of intersections in one direction is: 1
//The number of cars is: 2
//Car #1
//  is born in the lane located at col 1 and row 1, that aims SOUTHWARD,
//  and has 0 block(s) to go before turning
//  and plans to TURN_RIGHTWARD
//Car #2
//  is born in the lane located at col 1 and row 1, that aims WESTWARD,
//  and has -1 block(s) to go before turning
//  and plans to NEVER_TURN
//
<UNIX-PROMPT> cat TrafficTesterModel.java
// Programmers: GOATS team: Alex David Rex Tom Zihao
// *****************************************************************************
// *****************************************************************************
// **** TrafficTesterModel
// *****************************************************************************
// *****************************************************************************
// The purpose of the TrafficTesterModel is to create a grid given a provided
// numRows and numCols.  Provided cars are then inserted into the grid.
// Latest Enhancement: Stage 0 Corrections

import java.util.ArrayList;

public class TrafficTesterModel{
    Grid g;
    int t;
    int lengthOfSimulation;

    //************Constructor************
    public TrafficTesterModel(int numRows, int numCols,
    ArrayList< ArrayList<Integer> > carParameters, int lengthOfSim,
			     int laneCapacity, int minTimeToTravel){
	//System.out.println("In TrafficTesterModel(): ");
	//********Creating a new grid********
	//System.out.println("	Constructing a Grid...");
	g = new Grid(numRows, numCols, laneCapacity, minTimeToTravel);

	//********Teling the grid to make and insert cars********
	//System.out.println("	Telling the grid to make and insert cars...");
	g.insertCars(carParameters);

	lengthOfSimulation = lengthOfSim;

	//System.out.println("Exiting TrafficTesterModel()");
    }// End of TrafficTesterModel constructor



    //Calls update() on the Grid, causing the intersections to be looked at
    public void run(){
	//System.out.println("In TrafficTesterModel: running simulation");
	for(t = 1; t <= lengthOfSimulation; t++){
	    System.out.println("");
	    System.out.println("******************* During timestep: "
			       + t +" *******************");
	    g.update();
	}// End of for(t < lengthOfSimulation; t++)
	//g.update();
    }// End of run method



}
<UNIX-PROMPT> cat Grid.java
// Programmers: GOATS team: Alex David Rex Tom Zihao
// *****************************************************************************
// *****************************************************************************
// **** Grid
// *****************************************************************************
// *****************************************************************************
// Latest Enhancement: Stores a list of cars; refreshes each at start of tstep

import java.util.*;
import java.io.*;

public class Grid
{
    public static final int SOUTHWARD = 0;
    public static final int EASTWARD = 1;
    public static final int NORTHWARD = 2;
    public static final int WESTWARD = 3;

    // Store Intersections in a 2D array:
    // Even though Java is 0-indexed, Intersection (1,2) is i[1][2]
    // We achieve this by not initializing row 0 and col 0
    private Intersection i[][];
    private int numRows;
    private int numCols;
    private int laneCapacity;
    private int minTimeToTravelLane;
    private ArrayList<Car> cars;


    //Constuctor
    public Grid(int numRows, int numCols, int laneCapacity,
		int minTimeToTravelLane)
    {
	this.numRows = numRows;
	this.numCols = numCols;
	this.laneCapacity = laneCapacity;
	this.minTimeToTravelLane = minTimeToTravelLane;
	// Allocate space for numRows*numCols intersections
	// In nested for loops, construct lanes and intersections appropriately
	i = new Intersection[numRows + 1][numCols + 1];
	cars = new ArrayList<Car>();
	for(int rowNum = 1; rowNum <= numRows; rowNum++)
	{
	    for(int colNum=1; colNum <= numCols; colNum++)
	    {
		//System.out.print("Constructing Intersection ("+rowNum+
		    //	    ","+colNum+")...");
		// Construct the right amount of lanes for each intersection
		// There's a pattern in the number of "new" lane pairs for each:
		//   3 2 2 2
		//   3 2 2 2
		//   3 2 2 2
		//   4 3 3 3
		if(rowNum==1)
		{
		    if(colNum==1)
		    {
			// Construct 4 new lanes for Intersection [1,1]
			shareNoLanes(rowNum, colNum);
		    } else { //rowNum==1, colNum > 1
			// Constructs and shares lanes for the intersection at
			// [rowNum, colNum]
			shareLanesWithLeft(rowNum,colNum);
		    } // end of if(colNum==1)
		} else { //rowNum > 1
		    if(colNum==1)
		    {
			shareLanesWithBelow(rowNum,colNum);
		    } else { //rowNum > 1, colNum > 1
			shareLanesWithLeftAndBelow(rowNum,colNum);
		    } // end of if(colNum==1)
		} // end of if(rowNum==1)
		//end lane construction
		//System.out.println("Success!");
	    } // end of for(int colNum=0; colNum<numCols; colNum++)
	} // end of for(int rowNum = 0; rowNum < numRows; rowNum++)
	// The above code constructs lanes and intersections, populates grid */

	this.setBoundaryLanes();

    } // end of Grid(int numRows, int numCols)



    public void insertCars(ArrayList< ArrayList<Integer> > carParameters)
    {
	//Constructs cars w/ carParameters
	for( ArrayList<Integer> d:carParameters )
	{
	    Car c = new Car( d.get(4), d.get(5), d.get(0) );
	    this.insertCar( d.get(1), d.get(2), d.get(3), c );
	    //ArrayList carParameters looks like this:
		//[0]int carID, [1]int row, [2]int col,
		//[3]int laneDirectionCode, [4]int numBlocksBeforeTurning,
		//[5]int turnDirectionCode
	} // end of for( ArrayList<Integer> d:carParameters )
    } // end of insertCars(ArrayList< ArrayList<Integer> > carParameters)



    public void update()
    {
	for(Car c : cars)
	{
	    c.setHasChangedLanes(false);
	} // end of for(Car c : cars)
	for ( int rowNum = 1; rowNum <= numRows; rowNum++ )
	{
	    for ( int colNum = 1; colNum <= numCols; colNum++ )
	    {
		System.out.println("");
		System.out.println("At the intersection located at col " +
				    colNum+ " and row " + rowNum);
		i[rowNum][colNum].visit();
	    } // end of for( int colNum = 0; colNum < i[0].length; colNum++ )
	} // end of for( int rowNum = 0; rowNum < i.length; rowNum++ )
    } // end of update()



    private void insertCar(int row, int col, int laneDir, Car c)
    {
	(i[row][col].getInLane(laneDir)).initialAdd(c);
	cars.add(c);
    } // end of insertCar(int row, int col, int laneDir, Car c)




    private void shareLanesWithLeftAndBelow(int rowNum, int colNum)
    {
	Lane[] inLanes = new Lane[4];
	Lane[] outLanes = new Lane[4];
	for(int cardinalDir=0; cardinalDir<4; cardinalDir++)
	{
	    // For rows and columns > 1, lanes need to be shared
	    // with the intersection at left and with the intersection
	    // below
	    if(cardinalDir==SOUTHWARD){
		outLanes[SOUTHWARD] = i[rowNum-1][colNum].getInLane(SOUTHWARD);
	    } else if(cardinalDir==WESTWARD){
		outLanes[WESTWARD] = i[rowNum][colNum-1].getInLane(WESTWARD);
	    } else {
		outLanes[cardinalDir] = new Lane(laneCapacity,
						 minTimeToTravelLane);
	    } // end of if(cardinalDir==SOUTHWARD)
	} // end of for(int cardinalDir=0; cardinalDir<4; cardinalDir++)
	for(int cardinalDir=0; cardinalDir<4; cardinalDir++)
	{
	    if(cardinalDir==NORTHWARD)
	    {
		inLanes[NORTHWARD] = i[rowNum-1][colNum].getOutLane(NORTHWARD);
	    } else if(cardinalDir==EASTWARD){
		inLanes[EASTWARD] = i[rowNum][colNum-1].getOutLane(EASTWARD);
	    } else {
		inLanes[cardinalDir] = new Lane(laneCapacity,
						minTimeToTravelLane);
	    } // end of if(cardinalDir==NORTHWARD)
	} // end of for(int cardinalDir=0; cardinalDir<4; cardinalDir++)
	i[rowNum][colNum] = new Intersection(inLanes,outLanes);
   } // end of shareLanesWithLeftAndBelow(int rowNum, int colNum)



    private void shareLanesWithBelow(int rowNum, int colNum)
    {
	Lane[] inLanes = new Lane[4];
	Lane[] outLanes = new Lane[4];
	for(int cardinalDir=0; cardinalDir<4; cardinalDir++)
	{
	    // For rows > 1, the leftmost column has to share
	    // a pair of lanes with the intersection below it
	    if(cardinalDir==SOUTHWARD){
		outLanes[SOUTHWARD] = i[rowNum-1][colNum].getInLane(SOUTHWARD);
	    } else {
		outLanes[cardinalDir] = new Lane(laneCapacity,
						 minTimeToTravelLane);
	    } // end of if(cardinalDir==SOUTHWARD)
	} // end of for(int cardinalDir=0; cardinalDir<4; cardinalDir++)
	for(int cardinalDir=0; cardinalDir<4; cardinalDir++)
	{
	    if(cardinalDir==NORTHWARD){
		inLanes[NORTHWARD] = i[rowNum-1][colNum].getOutLane(NORTHWARD);
	    } else {
		inLanes[cardinalDir] = new Lane(laneCapacity,
						minTimeToTravelLane);
	    } // end of if(cardinalDir==NORTHWARD)
	} // end of for(int cardinalDir=0; cardinalDir<4; cardinalDir++)
	i[rowNum][colNum] = new Intersection(inLanes,outLanes);
    } // end of shareLanesWithBelow(int rowNum, int colNum)



    private void shareLanesWithLeft(int rowNum, int colNum)
    {
	Lane[] inLanes = new Lane[4];
	Lane[] outLanes = new Lane[4];
	for(int cardinalDir=0; cardinalDir<4; cardinalDir++)
	{
	    // On row 1, each intersection's westward outbound lane is the
	    // westward inbound lane of the intersection in the previous column
	    if(cardinalDir==WESTWARD)
	    {
		outLanes[WESTWARD] = i[rowNum][colNum-1].getInLane(WESTWARD);
	    } else {
		// The other 3 outbound lanes are new to this intersection
		outLanes[cardinalDir] = new Lane(laneCapacity,
						 minTimeToTravelLane);
	    } // end of if(cardinalDir==WESTWARD)
	} // end of for(int cardinalDir=0; cardinalDir<4; cardinalDir++)
	for(int cardinalDir=0; cardinalDir<4; cardinalDir++)
	{
	    // Similarly, the eastward inbound lane (adjacent to the
	    // westward outbound lane) has already been constructed
	    // and assigned to the intersection in the previous col.
	    if(cardinalDir==EASTWARD)
	    {
		inLanes[EASTWARD] = i[rowNum][colNum-1].getOutLane(EASTWARD);
	    } else {
		inLanes[cardinalDir] = new Lane(laneCapacity,
						minTimeToTravelLane);
	    } // end of if(cardinalDir==EASTWARD)
	} // end of for(int cardinalDir=0; cardinalDir<4; cardinalDir++)
	i[rowNum][colNum] = new Intersection(inLanes,outLanes);
    } // end of shareLanesWithLeft(int rowNum, int colNum)



    private void shareNoLanes(int rowNum, int colNum)
    {
	Lane[] inLanes = new Lane[4];
	Lane[] outLanes = new Lane[4];
	for( int cardinalDir=0; cardinalDir<4; cardinalDir++ )
	{
	    //Generate 4 new lane pairs for Intersection [1,1]
	    inLanes[cardinalDir] = new Lane(laneCapacity, minTimeToTravelLane);
	    outLanes[cardinalDir] = new Lane(laneCapacity, minTimeToTravelLane);
	} // end of for( int cardinalDir=0; cardinalDir<4; cardinalDir++ )
	i[rowNum][colNum] = new Intersection(inLanes,outLanes);
    } // end of shareNoLanes(int rowNum, int colNum)



    private void setBoundaryLanes(){
	//Set boundary lanes for the bottom row
	for (int colNum = 1; colNum <= numCols; colNum++){
	    (i[1][colNum].getOutLane(SOUTHWARD)).setOutboundBoundary();
	    (i[1][colNum].getInLane(NORTHWARD)).setInboundBoundary();
	} //end for (int colNum = 1; colNum <= numCols; colNum++)

	//Set boundary lanes for the top row
	for (int colNum = 1; colNum <= numCols; colNum++){
	    (i[numRows][colNum].getOutLane(NORTHWARD)).setOutboundBoundary();
	    (i[numRows][colNum].getInLane(SOUTHWARD)).setInboundBoundary();
	} //end for (int colNum = 1; colNum <= numCols; colNum++)

	//Set boundary lanes for the west side
	for (int rowNum = 1; rowNum <= numRows; rowNum++){
	    (i[rowNum][1].getOutLane(WESTWARD)).setOutboundBoundary();
	    (i[rowNum][1].getInLane(EASTWARD)).setInboundBoundary();
	} // end for (int rowNum = 1; rowNum <= numRows; rowNum++)

	//Set boundary lanes for the east side
	for (int rowNum = 1; rowNum <= numRows; rowNum++){
	    (i[rowNum][numCols].getOutLane(EASTWARD)).setOutboundBoundary();
	    (i[rowNum][numCols].getInLane(WESTWARD)).setInboundBoundary();
	} // end for (int rowNum = 1; rowNum <= numRows; rowNum++)

    }



}
<UNIX-PROMPT> cat Intersection.java
// Programmers: GOATS team: Alex David Rex Tom Zihao
// *****************************************************************************
// *****************************************************************************
// **** Intersection
// *****************************************************************************
// *****************************************************************************
// Latest Enhancement: Overhauled visit and helper methods

//Intersection Class
//An intersection will contain 2 Lane[]'s of size 4, for a total of 8 lanes.
//4 are for inflowing lanes, the other 4 are for outflowing lanes.
//Every car within the inLane array will be evaluated and moved to the proper
//lane within the outLane[], which will put it in the inLane[] for a different
//intersection.

public class Intersection {
    //**************Instance Variables**************
    public Lane[] inLane;
    public Lane[] outLane;

    private static final int SOUTHWARD = 0;
    private static final int EASTWARD = 1;
    private static final int NORTHWARD = 2;
    private static final int WESTWARD = 3;

    private static final int LEFT = -1;
    private static final int RIGHT = 1;
    private static final int STRAIGHT = 0;

    //**************Constructor**************
    public Intersection(Lane[] inLanes, Lane[] outLanes)
    {
	this.inLane = inLanes;
	this.outLane = outLanes;
    }// end of Intersection(Lane[], Lane[]) constructor



    //**************Instance Methods**************
    // Getter methods to get references to incoming, outgoing lanes
    public Lane getInLane(int laneDir)
    {
	return inLane[laneDir];
    }//end of getInLane()



    public Lane getOutLane(int laneDir)
    {
	return outLane[laneDir];
    }//end of getOutLane()



    //Looks at each lane in inLane and moves the car in that lane
    //(if it has one) into the appropriate outLane spot
    // Print the empty/nonempty status of incoming lanes, and when cars moved
    public void visit()
    {
	// First, process cars entering from the south (inLane[NORTHWARD])
	// Second, process cars entering from the east (inLane[WESTWARD])
	// Third, process cars entering from the north (inLane[SOUTHWARD])
	// Fourth, process cars entering from the west (inLane[EASTWARD])
	for( int step = 1; step <= 4; step++ )
	{
	    int srcDir = getNthProcessedLaneDirection(step);
	    inLane[srcDir].update();
	    if( !inLane[srcDir].isEmpty() )
	    {
		System.out.print("  incoming lane having direction " +
			TrafficTesterView.convertToLaneDirection(srcDir) +
			" is nonempty");
		Car c = inLane[srcDir].peek();
		if( c != null )
		{
		    int destDir = getDestDir(srcDir,c.getCurrentDirection());
		    if( !outLane[destDir].isFull() )
		    {
			System.out.println(" and");
			System.out.println("   car#" + c.getID() +
			    " is removed and placed into " +
			    "outgoing lane having direction " +
			    TrafficTesterView.convertToLaneDirection(destDir));
			inLane[srcDir].get(); // remove c from the inLane
			c.update(); // tell c to decrement its numBlocksB4Turn
			outLane[destDir].add(c);
		    } else {
			System.out.println(" but");
			System.out.println("   car#" + c.getID() +
			    " does not move because " +
			    "outgoing lane having direction " +
			    TrafficTesterView.convertToLaneDirection(destDir) +
			    " is full");
		    } // end if( !outLane[destDir].isFull() )
		} else {
		    System.out.println(); //Say no more than "lane is nonempty"
		} // end if( c != null );
	    } else {
		System.out.println("  incoming lane having direction " +
			TrafficTesterView.convertToLaneDirection(srcDir) +
			" is empty");
	    } // end if( !inLane[srcDir].isEmpty() )
	} // end for( int step = 1; step <= 4; step++ )
	// Lastly, print the empty/nonempty status of outgoing lanes
	for( int step = 1; step <= 4; step++ )
	{
	    int outDir = getNthProcessedLaneDirection(step);
	    System.out.println("  outgoing lane having direction " +
		TrafficTesterView.convertToLaneDirection(outDir) + " is " +
		(outLane[outDir].isEmpty() ? "empty" : "nonempty"));
	}

    } // end visit()



    private int getNthProcessedLaneDirection(int step)
    {
	if( step == 1 ){ return NORTHWARD; }
	if( step == 2 ){ return WESTWARD; }
	if( step == 3 ){ return SOUTHWARD; }
	if( step == 4 ){ return EASTWARD; }
	return -999;
    } // end getNthProcessedLaneDirection(int step)



    private int getDestDir(int sourceLaneDir, int carTurnDir)
    {
	if( sourceLaneDir == NORTHWARD )
	{
	    if( carTurnDir == LEFT ){ return WESTWARD; }
	    if( carTurnDir == STRAIGHT ){ return NORTHWARD; }
	    if( carTurnDir == RIGHT ){ return EASTWARD; }
	} else if( sourceLaneDir == WESTWARD )
	{
	    if( carTurnDir == LEFT ){ return SOUTHWARD; }
	    if( carTurnDir == STRAIGHT ){ return WESTWARD; }
	    if( carTurnDir == RIGHT ){ return NORTHWARD; }
	} else if( sourceLaneDir == SOUTHWARD )
	{
	    if( carTurnDir == LEFT ) { return EASTWARD; }
	    if( carTurnDir == STRAIGHT ){ return SOUTHWARD; }
	    if( carTurnDir == RIGHT ){ return WESTWARD; }
	} else if( sourceLaneDir == EASTWARD )
	{
	    if( carTurnDir == LEFT ){ return NORTHWARD; }
	    if( carTurnDir == STRAIGHT ){ return EASTWARD; }
	    if( carTurnDir == RIGHT ){ return SOUTHWARD; }
	} // end of if( sourceLaneDir == NORTHWARD )
	return -999;
    } // end of getDestDir(int sourceLaneDir, int carTurnDir)



}//end Intersection class
<UNIX-PROMPT> cat Lane.java
// Programmer: Arthur Charlesworth  (c) Copyright 2016
// Modified by GOATS team: Alex David Rex Tom Zihao
// *****************************************************************************
// *****************************************************************************
// **** Lane
// *****************************************************************************
// *****************************************************************************
// Latest Enhancement: Made inbound, outbound boundary lanes have no max capc.

import java.util.Queue;
import java.util.LinkedList; //The implementation of a queue
import java.util.HashMap;

//Lane Class
//This class defines a "Lane" object, which will hold cars.
//Lanes can be either incoming or outgoing depending on their direction in
//relation to intersections.
//Each lane will belong to 2 intersections: as an incoming lane for one
//and an outgoing lane for another

public class Lane {
    //**************Instance Variables**************
    private Queue<Car> q; // Stores the cars in the lane
    private HashMap<Car,Integer> timesInQueue;	// Stores the length of time
					    // each car spends in the lane
    private int capacity;
    private int minTimeToTraverse;
    public boolean inboundBoundary;
    public boolean outboundBoundary;

    //**************Constructor**************
    public Lane(int capacity, int minTimeToTraverse)
    {
	q = new LinkedList<Car>();
	timesInQueue = new HashMap<Car,Integer>();
	this.capacity = capacity;
	this.minTimeToTraverse = minTimeToTraverse;
    } // end of constructor



    //**************Instance Methods**************
    //removes a Car from a Lane and returns it
    public Car get()
    {
	if( this.peek() != null)
	{
	    // if a car is able to exit, remove it from the queue
	    return q.poll();
	} else {
	    // return null if no car is able to exit the queue yet.
	    return null;
	}
    } // end of get()



    public Car peek()
    {
	Car c = q.peek();
	if( c != null && timesInQueue.get(c) >= minTimeToTraverse)
	{
	    return c;
	} else {
	    // return null if no car is able to exit the queue yet.
	    return null;
	}
    } // end of peek()



    //adds a provided Car c to the Lane
    public boolean add(Car c)
    {
	if(this.isFull())
	{
	    System.out.println("Illegal attempt to add to a full lane");
	    return true;
	} // end of if(this.isFull())

	if(this.isOutboundBoundary())
	{
	    System.out.println("   car#" + c.getID() + " has left the grid");
	    // Future enhancement: update stats for the car leaving
	} // end of if(this.isOutboundBoundary())
	timesInQueue.put(c,0);
	c.setHasChangedLanes(true);
	return q.add(c);
    } // end of add(Car c)



    public boolean initialAdd(Car c)
    {
	boolean done = this.add(c);
	timesInQueue.put(c, minTimeToTraverse);
	return done;
    }



    // We "update" the length of time each car spends in the lane
    public void update()
    {
	for( Car c : q )
	{
	    if (!c.getHasChangedLanes()){
		// Increment c's timeInQueue
		timesInQueue.put(c,timesInQueue.get(c)+1);
	    }
	} // end of for( Car c : q )
    } // end of update()



    public boolean isEmpty()
    {
	return (q.peek() == null);
    } // end of isEmpty()



    public boolean isFull()
    {
	if( this.isInboundBoundary() || this.isOutboundBoundary() )
	{
	    return false;
	} // end of if ( this.isInboundBoundary() || this.isOutboundBoundary() )
	return q.size() >= capacity;
    } // end of isFull()



    public void setInboundBoundary() {
	this.inboundBoundary = true;
    } // end of isInboundBoundary()



    public void setOutboundBoundary() {
	this.outboundBoundary = true;
    } // end of isOutboundBoundary()



    public boolean isInboundBoundary() {
	return this.inboundBoundary;
    } // end of isInboundBoundary()



    public boolean isOutboundBoundary() {
	return this.outboundBoundary;
    } // end of isOutboundBoundary()



}
<UNIX-PROMPT> cat Car.java
// Programmers: GOATS team: Alex David Rex Tom Zihao
// *****************************************************************************
// *****************************************************************************
// **** Car
// *****************************************************************************
// *****************************************************************************
// Latest Enhancement: Corrected style rules for stage_0

// The Car class keeps track of ID, when to turn, and turning direction of each
// instance of Car, and provides such information if needed.

public class Car{
    //**************Instance Variables**************
    int numBlocksBeforeTurning;
    int turnDirectionCode;
    int carID;
    boolean hasChangedLanes;

    //**************Constructor**************
    public Car(int initialNumBlocks, int turnDirectionCode, int carID){
	this.numBlocksBeforeTurning = initialNumBlocks;
	this.turnDirectionCode = turnDirectionCode;
	this.carID = carID;
	this.hasChangedLanes = false;
    }//End of car constructor



    //**************Instance Methods**************
    //After a car moves from one lane to another, update() is called to
    //decrement the numBlocksBeforeTurning
    public void update(){
	this.numBlocksBeforeTurning--;
    }//End of update() method



    //Determines which direction a car will be moving.
    //If its numBlocksBeforeTurning is 0, the it will return the car's
    //turnDirectinoCode.
    //Otherwise, it will return -1, which indicates it is moving straight
    public int getCurrentDirection(){
	if (this.numBlocksBeforeTurning == 0){
	    return this.turnDirectionCode;
	}//end of if(this.numBlocksBeforeTurning == 0)
	else{
	    return 0;
	}
    }//End of getCurrentDirection() method



    //Return the ID of a car
    public int getID(){
	return this.carID;
    }//End of getID() method



    //Returns hasChangedLanes
    public boolean getHasChangedLanes(){
	return this.hasChangedLanes;
    }//End of hasItMoved() method



    //Sets the hasChangedLanes to change
    public void setHasChangedLanes(boolean change){
	this.hasChangedLanes = change;
    }//End of setHasChangedLanes() method

}

<UNIX-PROMPT> /bin/rm *class
<UNIX-PROMPT> javac TrafficTesterView.java
<UNIX-PROMPT> ls -tl *class
-rw-r--r--  1 david  staff   752 Nov 16 18:31 Car.class
-rw-r--r--  1 david  staff  4093 Nov 16 18:31 Grid.class
-rw-r--r--  1 david  staff  2690 Nov 16 18:31 Intersection.class
-rw-r--r--  1 david  staff  2736 Nov 16 18:31 Lane.class
-rw-r--r--  1 david  staff  1142 Nov 16 18:31 TrafficTesterModel.class
-rw-r--r--  1 david  staff  1928 Nov 16 18:31 TrafficTesterView.class
<UNIX-PROMPT> cat data1d_boundary_capacity_for_TrafficTesterView
numIntersectionsInOneDirection:
1
lengthOfSimulation:
4
maxLaneCapacity
2
minTimeToTravelLane
2
maxQuarterRoundaboutCapacity
2
minTimeToTravelQuarterRoundabout
2
number of cars created for the test:
4
car number:
1
born in the lane that is positioned at col:
1
born in the lane that is positioned at row:
1
born in the lane that is oriented in direction:
2
additional blocks to travel prior to turning (-1 means the car will never turn):
-1
direction the car will turn, when the car turns:
0
car number:
2
born in the lane that is positioned at col:
1
born in the lane that is positioned at row:
1
born in the lane that is oriented in direction:
2
additional blocks to travel prior to turning (-1 means the car will never turn):
-1
direction the car will turn, when the car turns:
0
car number:
3
born in the lane that is positioned at col:
1
born in the lane that is positioned at row:
1
born in the lane that is oriented in direction:
2
additional blocks to travel prior to turning (-1 means the car will never turn):
-1
direction the car will turn, when the car turns:
0
car number:
4
born in the lane that is positioned at col:
1
born in the lane that is positioned at row:
1
born in the lane that is oriented in direction:
2
additional blocks to travel prior to turning (-1 means the car will never turn):
-1
direction the car will turn, when the car turns:
0
<UNIX-PROMPT> java TrafficTesterView < data1d_boundary_capacity_for_TrafficTesterView

******************* During timestep: 1 *******************

At the intersection located at col 1 and row 1
  incoming lane having direction NORTHWARD is nonempty and
   car#1 is removed and placed into outgoing lane having direction NORTHWARD
   car#1 has left the grid
  incoming lane having direction WESTWARD is empty
  incoming lane having direction SOUTHWARD is empty
  incoming lane having direction EASTWARD is empty
  outgoing lane having direction NORTHWARD is nonempty
  outgoing lane having direction WESTWARD is empty
  outgoing lane having direction SOUTHWARD is empty
  outgoing lane having direction EASTWARD is empty

******************* During timestep: 2 *******************

At the intersection located at col 1 and row 1
  incoming lane having direction NORTHWARD is nonempty and
   car#2 is removed and placed into outgoing lane having direction NORTHWARD
   car#2 has left the grid
  incoming lane having direction WESTWARD is empty
  incoming lane having direction SOUTHWARD is empty
  incoming lane having direction EASTWARD is empty
  outgoing lane having direction NORTHWARD is nonempty
  outgoing lane having direction WESTWARD is empty
  outgoing lane having direction SOUTHWARD is empty
  outgoing lane having direction EASTWARD is empty

******************* During timestep: 3 *******************

At the intersection located at col 1 and row 1
  incoming lane having direction NORTHWARD is nonempty and
   car#3 is removed and placed into outgoing lane having direction NORTHWARD
   car#3 has left the grid
  incoming lane having direction WESTWARD is empty
  incoming lane having direction SOUTHWARD is empty
  incoming lane having direction EASTWARD is empty
  outgoing lane having direction NORTHWARD is nonempty
  outgoing lane having direction WESTWARD is empty
  outgoing lane having direction SOUTHWARD is empty
  outgoing lane having direction EASTWARD is empty

******************* During timestep: 4 *******************

At the intersection located at col 1 and row 1
  incoming lane having direction NORTHWARD is nonempty and
   car#4 is removed and placed into outgoing lane having direction NORTHWARD
   car#4 has left the grid
  incoming lane having direction WESTWARD is empty
  incoming lane having direction SOUTHWARD is empty
  incoming lane having direction EASTWARD is empty
  outgoing lane having direction NORTHWARD is nonempty
  outgoing lane having direction WESTWARD is empty
  outgoing lane having direction SOUTHWARD is empty
  outgoing lane having direction EASTWARD is empty
0;david@mactop: ~/Documents/UR/y3s1/cs322/proj/code/cs322-traffic-projdavid@mactop:~/Documents/UR/y3s1/cs322/proj/code/cs322-traffic-proj$ exit
exit

Script done on Wed Nov 16 18:31:33 2016
